{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\OneDrive\\\\Desktop\\\\firma\\\\signature-generator-app\\\\src\\\\components\\\\EncryptWithMetaMask.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { encrypt } from \"@metamask/eth-sig-util\";\nimport { Buffer } from \"buffer\";\n// Importa solo ciò che serve da ethers.js\nimport { keccak256, getBytes, Signature, BrowserProvider } from \"ethers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function EncryptAndSignSeparate() {\n  _s();\n  const [message, setMessage] = useState(\"\");\n  const [ciphertextHex, setCiphertextHex] = useState(\"\");\n  const [hashHex, setHashHex] = useState(\"\");\n  const [hashDec, setHashDec] = useState(\"\");\n  const [results, setResults] = useState(null);\n  const [error, setError] = useState(\"\");\n\n  // Funzione helper per ottenere il provider di ethers.js da window.ethereum\n  const getEthersProvider = () => {\n    if (!window.ethereum) {\n      throw new Error(\"MetaMask o un altro wallet compatibile non è installato!\");\n    }\n    return new BrowserProvider(window.ethereum);\n  };\n\n  // --- Funzione per richiedere e ottenere l'account connesso (usando ethers.js) ---\n  const requestAccount = async () => {\n    try {\n      const provider = getEthersProvider();\n      // Chiedi i permessi per gli account. BrowserProvider.send è l'equivalente di window.ethereum.request\n      // per metodi non standard ma comuni come wallet_requestPermissions.\n      await provider.send(\"wallet_requestPermissions\", [{\n        eth_accounts: {}\n      }]);\n\n      // getSigner() richiede automaticamente eth_accounts se non è già stato fatto e\n      // restituisce un oggetto signer che rappresenta l'account connesso.\n      const signer = await provider.getSigner();\n      return await signer.getAddress(); // Ottieni l'indirizzo dell'account connesso\n    } catch (err) {\n      console.error(\"Errore nel richiedere account:\", err);\n      // Rilancia l'errore per essere gestito dal chiamante (handleEncrypt/handleSign)\n      throw new Error(err.message || \"Impossibile ottenere l'account.\");\n    }\n  };\n\n  // --- Gestione della cifratura ---\n  const handleEncrypt = async () => {\n    setError(\"\");\n    setResults(null); // Resetta i risultati della firma\n    try {\n      const provider = getEthersProvider();\n      const address = await requestAccount(); // Ottieni l'indirizzo usando la funzione basata su ethers.js\n\n      // Ottieni la chiave pubblica di crittografia usando provider.send()\n      // Questo è un metodo specifico di MetaMask, non standard EVM, quindi si usa 'send'\n      const publicKey = await provider.send(\"eth_getEncryptionPublicKey\", [address]);\n      const encryptedObject = encrypt({\n        publicKey,\n        data: message,\n        version: \"x25519-xsalsa20-poly1305\"\n      });\n      console.log(JSON.stringify(encryptedObject, null, 2));\n      const ciphertextBase64 = encryptedObject.ciphertext;\n      const hex = Buffer.from(ciphertextBase64, \"base64\").toString(\"hex\");\n      const ciphertextBytes = Buffer.from(hex, \"hex\");\n      const hash = keccak256(ciphertextBytes);\n      const hashBigInt = BigInt(hash);\n      setCiphertextHex(hex);\n      setHashHex(hash);\n      setHashDec(hashBigInt.toString());\n    } catch (err) {\n      console.error(err);\n      setError(\"Errore durante la cifratura: \" + (err.message || \"Sconosciuto\"));\n    }\n  };\n\n  // --- Gestione della firma ---\n  const handleSign = async () => {\n    setError(\"\");\n    try {\n      if (!hashHex) {\n        // Assicurati che l'hash sia stato generato prima di firmare\n        setError(\"Per favore, cifra prima il messaggio per generare l'hash.\");\n        return;\n      }\n      const provider = getEthersProvider();\n      const signer = await provider.getSigner(); // Ottieni il signer che rappresenta l'account connesso\n      const address = await signer.getAddress(); // Ottieni l'indirizzo dal signer\n\n      // Firma il messaggio (l'hash del messaggio cifrato)\n      // getBytes è utile per assicurarsi che l'input sia un Uint8Array come ethers si aspetta per signMessage\n      const flatSig = await signer.signMessage(getBytes(hashHex));\n\n      // Parsifica la firma per ottenere i componenti r, s, v\n      const sigObj = Signature.from(flatSig);\n      setResults({\n        signature: flatSig,\n        v: sigObj.v,\n        r: sigObj.r,\n        s: sigObj.s,\n        betaAddress: address // L'indirizzo che ha firmato\n      });\n    } catch (err) {\n      console.error(err);\n      setError(\"Errore durante la firma: \" + (err.message || \"Sconosciuto\"));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: \"1rem\",\n      fontFamily: \"Arial, sans-serif\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Cifra e Firma un Messaggio\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      placeholder: \"Scrivi un messaggio\",\n      value: message,\n      onChange: e => setMessage(e.target.value),\n      rows: 4,\n      style: {\n        width: \"100%\",\n        marginBottom: \"1rem\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleEncrypt,\n      style: {\n        marginBottom: \"1rem\"\n      },\n      children: \"Cifra con Alfa (mittente)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), ciphertextHex && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: \"1rem\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Dati Cifrati\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Messaggio cifrato (hex):\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 14\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        readOnly: true,\n        value: \"0x\" + ciphertextHex,\n        style: {\n          width: \"100%\",\n          height: \"80px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Hash (hex):\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 14\n        }, this), \" \", hashHex]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Hash (decimale):\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 14\n        }, this), \" \", hashDec]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSign,\n        style: {\n          marginTop: \"1rem\"\n        },\n        children: \"Firma con Beta (relay)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }, this), results && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: \"2rem\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Firma\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"code\", {\n            children: \"v:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 17\n          }, this), \" \", results.v]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"code\", {\n            children: \"r:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 17\n          }, this), \" \", results.r]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"code\", {\n            children: \"s:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 17\n          }, this), \" \", results.s]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"code\", {\n            children: \"Beta address:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 17\n          }, this), \" \", results.betaAddress]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n}\n_s(EncryptAndSignSeparate, \"WsHengziwHuRJpijoWPP9d+qNWU=\");\n_c = EncryptAndSignSeparate;\nvar _c;\n$RefreshReg$(_c, \"EncryptAndSignSeparate\");","map":{"version":3,"names":["React","useState","encrypt","Buffer","keccak256","getBytes","Signature","BrowserProvider","jsxDEV","_jsxDEV","EncryptAndSignSeparate","_s","message","setMessage","ciphertextHex","setCiphertextHex","hashHex","setHashHex","hashDec","setHashDec","results","setResults","error","setError","getEthersProvider","window","ethereum","Error","requestAccount","provider","send","eth_accounts","signer","getSigner","getAddress","err","console","handleEncrypt","address","publicKey","encryptedObject","data","version","log","JSON","stringify","ciphertextBase64","ciphertext","hex","from","toString","ciphertextBytes","hash","hashBigInt","BigInt","handleSign","flatSig","signMessage","sigObj","signature","v","r","s","betaAddress","style","padding","fontFamily","children","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","value","onChange","e","target","rows","width","marginBottom","onClick","marginTop","readOnly","height","color","_c","$RefreshReg$"],"sources":["C:/Users/User/OneDrive/Desktop/firma/signature-generator-app/src/components/EncryptWithMetaMask.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { encrypt } from \"@metamask/eth-sig-util\";\nimport { Buffer } from \"buffer\";\n// Importa solo ciò che serve da ethers.js\nimport { keccak256, getBytes, Signature, BrowserProvider } from \"ethers\";\n\nexport default function EncryptAndSignSeparate() {\n  const [message, setMessage] = useState(\"\");\n  const [ciphertextHex, setCiphertextHex] = useState(\"\");\n  const [hashHex, setHashHex] = useState(\"\");\n  const [hashDec, setHashDec] = useState(\"\");\n  const [results, setResults] = useState(null);\n  const [error, setError] = useState(\"\");\n\n  // Funzione helper per ottenere il provider di ethers.js da window.ethereum\n  const getEthersProvider = () => {\n    if (!window.ethereum) {\n      throw new Error(\"MetaMask o un altro wallet compatibile non è installato!\");\n    }\n    return new BrowserProvider(window.ethereum);\n  };\n\n  // --- Funzione per richiedere e ottenere l'account connesso (usando ethers.js) ---\n  const requestAccount = async () => {\n    try {\n      const provider = getEthersProvider();\n      // Chiedi i permessi per gli account. BrowserProvider.send è l'equivalente di window.ethereum.request\n      // per metodi non standard ma comuni come wallet_requestPermissions.\n      await provider.send(\"wallet_requestPermissions\", [{ eth_accounts: {} }]);\n      \n      // getSigner() richiede automaticamente eth_accounts se non è già stato fatto e\n      // restituisce un oggetto signer che rappresenta l'account connesso.\n      const signer = await provider.getSigner();\n      return await signer.getAddress(); // Ottieni l'indirizzo dell'account connesso\n    } catch (err) {\n      console.error(\"Errore nel richiedere account:\", err);\n      // Rilancia l'errore per essere gestito dal chiamante (handleEncrypt/handleSign)\n      throw new Error(err.message || \"Impossibile ottenere l'account.\");\n    }\n  };\n\n  // --- Gestione della cifratura ---\n  const handleEncrypt = async () => {\n    setError(\"\");\n    setResults(null); // Resetta i risultati della firma\n    try {\n      const provider = getEthersProvider();\n      const address = await requestAccount(); // Ottieni l'indirizzo usando la funzione basata su ethers.js\n\n      // Ottieni la chiave pubblica di crittografia usando provider.send()\n      // Questo è un metodo specifico di MetaMask, non standard EVM, quindi si usa 'send'\n      const publicKey = await provider.send(\"eth_getEncryptionPublicKey\", [address]);\n\n      const encryptedObject = encrypt({\n        publicKey,\n        data: message,\n        version: \"x25519-xsalsa20-poly1305\",\n      });\n      console.log(JSON.stringify(encryptedObject, null, 2));\n\n      const ciphertextBase64 = encryptedObject.ciphertext;\n      const hex = Buffer.from(ciphertextBase64, \"base64\").toString(\"hex\");\n\n      const ciphertextBytes = Buffer.from(hex, \"hex\");\n      const hash = keccak256(ciphertextBytes);\n      const hashBigInt = BigInt(hash);\n\n      setCiphertextHex(hex);\n      setHashHex(hash);\n      setHashDec(hashBigInt.toString());\n    } catch (err) {\n      console.error(err);\n      setError(\"Errore durante la cifratura: \" + (err.message || \"Sconosciuto\"));\n    }\n  };\n\n  // --- Gestione della firma ---\n  const handleSign = async () => {\n    setError(\"\");\n    try {\n      if (!hashHex) { // Assicurati che l'hash sia stato generato prima di firmare\n        setError(\"Per favore, cifra prima il messaggio per generare l'hash.\");\n        return;\n      }\n      \n      const provider = getEthersProvider();\n      const signer = await provider.getSigner(); // Ottieni il signer che rappresenta l'account connesso\n      const address = await signer.getAddress(); // Ottieni l'indirizzo dal signer\n\n      // Firma il messaggio (l'hash del messaggio cifrato)\n      // getBytes è utile per assicurarsi che l'input sia un Uint8Array come ethers si aspetta per signMessage\n      const flatSig = await signer.signMessage(getBytes(hashHex));\n      \n      // Parsifica la firma per ottenere i componenti r, s, v\n      const sigObj = Signature.from(flatSig);\n\n      setResults({\n        signature: flatSig,\n        v: sigObj.v,\n        r: sigObj.r,\n        s: sigObj.s,\n        betaAddress: address, // L'indirizzo che ha firmato\n      });\n    } catch (err) {\n      console.error(err);\n      setError(\"Errore durante la firma: \" + (err.message || \"Sconosciuto\"));\n    }\n  };\n\n  return (\n    <div style={{ padding: \"1rem\", fontFamily: \"Arial, sans-serif\" }}>\n      <h2>Cifra e Firma un Messaggio</h2>\n      \n      <textarea\n        placeholder=\"Scrivi un messaggio\"\n        value={message}\n        onChange={(e) => setMessage(e.target.value)}\n        rows={4}\n        style={{ width: \"100%\", marginBottom: \"1rem\" }}\n      />\n\n      <button onClick={handleEncrypt} style={{ marginBottom: \"1rem\" }}>\n        Cifra con Alfa (mittente)\n      </button>\n\n      {ciphertextHex && (\n        <div style={{ marginTop: \"1rem\" }}>\n          <h3>Dati Cifrati</h3>\n          <p><strong>Messaggio cifrato (hex):</strong></p>\n          <textarea readOnly value={\"0x\" + ciphertextHex} style={{ width: \"100%\", height: \"80px\" }} />\n          <p><strong>Hash (hex):</strong> {hashHex}</p>\n          <p><strong>Hash (decimale):</strong> {hashDec}</p>\n\n          <button onClick={handleSign} style={{ marginTop: \"1rem\" }}>\n            Firma con Beta (relay)\n          </button>\n        </div>\n      )}\n\n      {results && (\n        <div style={{ marginTop: \"2rem\" }}>\n          <h3>Firma</h3>\n          <ul>\n            <li><code>v:</code> {results.v}</li>\n            <li><code>r:</code> {results.r}</li>\n            <li><code>s:</code> {results.s}</li>\n            <li><code>Beta address:</code> {results.betaAddress}</li>\n          </ul>\n        </div>\n      )}\n\n      {error && <p style={{ color: \"red\" }}>{error}</p>}\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}