{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.recoverTypedSignature = exports.signTypedData = exports.typedSignatureHash = exports.TypedDataUtils = exports.TYPED_MESSAGE_SCHEMA = exports.SignTypedDataVersion = void 0;\nconst ethjs_util_1 = require(\"ethjs-util\");\nconst util_1 = require(\"@ethereumjs/util\");\nconst keccak_1 = require(\"ethereum-cryptography/keccak\");\nconst ethereumjs_abi_utils_1 = require(\"./ethereumjs-abi-utils\");\nconst utils_1 = require(\"./utils\");\n/**\n * Represents the version of `signTypedData` being used.\n *\n * V1 is based upon [an early version of EIP-712](https://github.com/ethereum/EIPs/pull/712/commits/21abe254fe0452d8583d5b132b1d7be87c0439ca)\n * that lacked some later security improvements, and should generally be neglected in favor of\n * later versions.\n *\n * V3 is based on EIP-712, except that arrays and recursive data structures are not supported.\n *\n * V4 is based on EIP-712, and includes full support of arrays and recursive data structures.\n */\nvar SignTypedDataVersion;\n(function (SignTypedDataVersion) {\n  SignTypedDataVersion[\"V1\"] = \"V1\";\n  SignTypedDataVersion[\"V3\"] = \"V3\";\n  SignTypedDataVersion[\"V4\"] = \"V4\";\n})(SignTypedDataVersion = exports.SignTypedDataVersion || (exports.SignTypedDataVersion = {}));\nexports.TYPED_MESSAGE_SCHEMA = {\n  type: 'object',\n  properties: {\n    types: {\n      type: 'object',\n      additionalProperties: {\n        type: 'array',\n        items: {\n          type: 'object',\n          properties: {\n            name: {\n              type: 'string'\n            },\n            type: {\n              type: 'string'\n            }\n          },\n          required: ['name', 'type']\n        }\n      }\n    },\n    primaryType: {\n      type: 'string'\n    },\n    domain: {\n      type: 'object'\n    },\n    message: {\n      type: 'object'\n    }\n  },\n  required: ['types', 'primaryType', 'domain', 'message']\n};\n/**\n * Validate that the given value is a valid version string.\n *\n * @param version - The version value to validate.\n * @param allowedVersions - A list of allowed versions. If omitted, all versions are assumed to be\n * allowed.\n */\nfunction validateVersion(version, allowedVersions) {\n  if (!Object.keys(SignTypedDataVersion).includes(version)) {\n    throw new Error(`Invalid version: '${version}'`);\n  } else if (allowedVersions && !allowedVersions.includes(version)) {\n    throw new Error(`SignTypedDataVersion not allowed: '${version}'. Allowed versions are: ${allowedVersions.join(', ')}`);\n  }\n}\n/**\n * Encode a single field.\n *\n * @param types - All type definitions.\n * @param name - The name of the field to encode.\n * @param type - The type of the field being encoded.\n * @param value - The value to encode.\n * @param version - The EIP-712 version the encoding should comply with.\n * @returns Encoded representation of the field.\n */\nfunction encodeField(types, name, type, value, version) {\n  validateVersion(version, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);\n  if (types[type] !== undefined) {\n    return ['bytes32', version === SignTypedDataVersion.V4 && value == null // eslint-disable-line no-eq-null\n    ? '0x0000000000000000000000000000000000000000000000000000000000000000' : (0, util_1.arrToBufArr)((0, keccak_1.keccak256)(encodeData(type, value, types, version)))];\n  }\n  if (value === undefined) {\n    throw new Error(`missing value for field ${name} of type ${type}`);\n  }\n  if (type === 'bytes') {\n    if (typeof value === 'number') {\n      value = (0, utils_1.numberToBuffer)(value);\n    } else if ((0, ethjs_util_1.isHexString)(value)) {\n      const prepend = value.length % 2 ? '0' : '';\n      value = Buffer.from(prepend + value.slice(2), 'hex');\n    } else {\n      value = Buffer.from(value, 'utf8');\n    }\n    return ['bytes32', (0, util_1.arrToBufArr)((0, keccak_1.keccak256)(value))];\n  }\n  if (type === 'string') {\n    if (typeof value === 'number') {\n      value = (0, utils_1.numberToBuffer)(value);\n    } else {\n      value = Buffer.from(value !== null && value !== void 0 ? value : '', 'utf8');\n    }\n    return ['bytes32', (0, util_1.arrToBufArr)((0, keccak_1.keccak256)(value))];\n  }\n  if (type.lastIndexOf(']') === type.length - 1) {\n    if (version === SignTypedDataVersion.V3) {\n      throw new Error('Arrays are unimplemented in encodeData; use V4 extension');\n    }\n    const parsedType = type.slice(0, type.lastIndexOf('['));\n    const typeValuePairs = value.map(item => encodeField(types, name, parsedType, item, version));\n    return ['bytes32', (0, util_1.arrToBufArr)((0, keccak_1.keccak256)((0, ethereumjs_abi_utils_1.rawEncode)(typeValuePairs.map(([t]) => t), typeValuePairs.map(([, v]) => v))))];\n  }\n  return [type, value];\n}\n/**\n * Encodes an object by encoding and concatenating each of its members.\n *\n * @param primaryType - The root type.\n * @param data - The object to encode.\n * @param types - Type definitions for all types included in the message.\n * @param version - The EIP-712 version the encoding should comply with.\n * @returns An encoded representation of an object.\n */\nfunction encodeData(primaryType, data, types, version) {\n  validateVersion(version, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);\n  const encodedTypes = ['bytes32'];\n  const encodedValues = [hashType(primaryType, types)];\n  for (const field of types[primaryType]) {\n    if (version === SignTypedDataVersion.V3 && data[field.name] === undefined) {\n      continue;\n    }\n    const [type, value] = encodeField(types, field.name, field.type, data[field.name], version);\n    encodedTypes.push(type);\n    encodedValues.push(value);\n  }\n  return (0, ethereumjs_abi_utils_1.rawEncode)(encodedTypes, encodedValues);\n}\n/**\n * Encodes the type of an object by encoding a comma delimited list of its members.\n *\n * @param primaryType - The root type to encode.\n * @param types - Type definitions for all types included in the message.\n * @returns An encoded representation of the primary type.\n */\nfunction encodeType(primaryType, types) {\n  let result = '';\n  const unsortedDeps = findTypeDependencies(primaryType, types);\n  unsortedDeps.delete(primaryType);\n  const deps = [primaryType, ...Array.from(unsortedDeps).sort()];\n  for (const type of deps) {\n    const children = types[type];\n    if (!children) {\n      throw new Error(`No type definition specified: ${type}`);\n    }\n    result += `${type}(${types[type].map(({\n      name,\n      type: t\n    }) => `${t} ${name}`).join(',')})`;\n  }\n  return result;\n}\n/**\n * Finds all types within a type definition object.\n *\n * @param primaryType - The root type.\n * @param types - Type definitions for all types included in the message.\n * @param results - The current set of accumulated types.\n * @returns The set of all types found in the type definition.\n */\nfunction findTypeDependencies(primaryType, types, results = new Set()) {\n  [primaryType] = primaryType.match(/^\\w*/u);\n  if (results.has(primaryType) || types[primaryType] === undefined) {\n    return results;\n  }\n  results.add(primaryType);\n  for (const field of types[primaryType]) {\n    findTypeDependencies(field.type, types, results);\n  }\n  return results;\n}\n/**\n * Hashes an object.\n *\n * @param primaryType - The root type.\n * @param data - The object to hash.\n * @param types - Type definitions for all types included in the message.\n * @param version - The EIP-712 version the encoding should comply with.\n * @returns The hash of the object.\n */\nfunction hashStruct(primaryType, data, types, version) {\n  validateVersion(version, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);\n  return (0, util_1.arrToBufArr)((0, keccak_1.keccak256)(encodeData(primaryType, data, types, version)));\n}\n/**\n * Hashes the type of an object.\n *\n * @param primaryType - The root type to hash.\n * @param types - Type definitions for all types included in the message.\n * @returns The hash of the object type.\n */\nfunction hashType(primaryType, types) {\n  const encodedHashType = Buffer.from(encodeType(primaryType, types), 'utf-8');\n  return (0, util_1.arrToBufArr)((0, keccak_1.keccak256)(encodedHashType));\n}\n/**\n * Removes properties from a message object that are not defined per EIP-712.\n *\n * @param data - The typed message object.\n * @returns The typed message object with only allowed fields.\n */\nfunction sanitizeData(data) {\n  const sanitizedData = {};\n  for (const key in exports.TYPED_MESSAGE_SCHEMA.properties) {\n    if (data[key]) {\n      sanitizedData[key] = data[key];\n    }\n  }\n  if ('types' in sanitizedData) {\n    sanitizedData.types = Object.assign({\n      EIP712Domain: []\n    }, sanitizedData.types);\n  }\n  return sanitizedData;\n}\n/**\n * Hash a typed message according to EIP-712. The returned message starts with the EIP-712 prefix,\n * which is \"1901\", followed by the hash of the domain separator, then the data (if any).\n * The result is hashed again and returned.\n *\n * This function does not sign the message. The resulting hash must still be signed to create an\n * EIP-712 signature.\n *\n * @param typedData - The typed message to hash.\n * @param version - The EIP-712 version the encoding should comply with.\n * @returns The hash of the typed message.\n */\nfunction eip712Hash(typedData, version) {\n  validateVersion(version, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);\n  const sanitizedData = sanitizeData(typedData);\n  const parts = [Buffer.from('1901', 'hex')];\n  parts.push(hashStruct('EIP712Domain', sanitizedData.domain, sanitizedData.types, version));\n  if (sanitizedData.primaryType !== 'EIP712Domain') {\n    parts.push(hashStruct(\n    // TODO: Validate that this is a string, so this type cast can be removed.\n    sanitizedData.primaryType, sanitizedData.message, sanitizedData.types, version));\n  }\n  return (0, util_1.arrToBufArr)((0, keccak_1.keccak256)(Buffer.concat(parts)));\n}\n/**\n * A collection of utility functions used for signing typed data.\n */\nexports.TypedDataUtils = {\n  encodeData,\n  encodeType,\n  findTypeDependencies,\n  hashStruct,\n  hashType,\n  sanitizeData,\n  eip712Hash\n};\n/**\n * Generate the \"V1\" hash for the provided typed message.\n *\n * The hash will be generated in accordance with an earlier version of the EIP-712\n * specification. This hash is used in `signTypedData_v1`.\n *\n * @param typedData - The typed message.\n * @returns The '0x'-prefixed hex encoded hash representing the type of the provided message.\n */\nfunction typedSignatureHash(typedData) {\n  const hashBuffer = _typedSignatureHash(typedData);\n  return (0, util_1.bufferToHex)(hashBuffer);\n}\nexports.typedSignatureHash = typedSignatureHash;\n/**\n * Generate the \"V1\" hash for the provided typed message.\n *\n * The hash will be generated in accordance with an earlier version of the EIP-712\n * specification. This hash is used in `signTypedData_v1`.\n *\n * @param typedData - The typed message.\n * @returns The hash representing the type of the provided message.\n */\nfunction _typedSignatureHash(typedData) {\n  const error = new Error('Expect argument to be non-empty array');\n  if (typeof typedData !== 'object' || !('length' in typedData) || !typedData.length) {\n    throw error;\n  }\n  const data = typedData.map(function (e) {\n    if (e.type !== 'bytes') {\n      return e.value;\n    }\n    return (0, utils_1.legacyToBuffer)(e.value);\n  });\n  const types = typedData.map(function (e) {\n    return e.type;\n  });\n  const schema = typedData.map(function (e) {\n    if (!e.name) {\n      throw error;\n    }\n    return `${e.type} ${e.name}`;\n  });\n  return (0, util_1.arrToBufArr)((0, keccak_1.keccak256)((0, ethereumjs_abi_utils_1.solidityPack)(['bytes32', 'bytes32'], [(0, keccak_1.keccak256)((0, ethereumjs_abi_utils_1.solidityPack)(new Array(typedData.length).fill('string'), schema)), (0, keccak_1.keccak256)((0, ethereumjs_abi_utils_1.solidityPack)(types, data))])));\n}\n/**\n * Sign typed data according to EIP-712. The signing differs based upon the `version`.\n *\n * V1 is based upon [an early version of EIP-712](https://github.com/ethereum/EIPs/pull/712/commits/21abe254fe0452d8583d5b132b1d7be87c0439ca)\n * that lacked some later security improvements, and should generally be neglected in favor of\n * later versions.\n *\n * V3 is based on [EIP-712](https://eips.ethereum.org/EIPS/eip-712), except that arrays and\n * recursive data structures are not supported.\n *\n * V4 is based on [EIP-712](https://eips.ethereum.org/EIPS/eip-712), and includes full support of\n * arrays and recursive data structures.\n *\n * @param options - The signing options.\n * @param options.privateKey - The private key to sign with.\n * @param options.data - The typed data to sign.\n * @param options.version - The signing version to use.\n * @returns The '0x'-prefixed hex encoded signature.\n */\nfunction signTypedData({\n  privateKey,\n  data,\n  version\n}) {\n  validateVersion(version);\n  if ((0, utils_1.isNullish)(data)) {\n    throw new Error('Missing data parameter');\n  } else if ((0, utils_1.isNullish)(privateKey)) {\n    throw new Error('Missing private key parameter');\n  }\n  const messageHash = version === SignTypedDataVersion.V1 ? _typedSignatureHash(data) : exports.TypedDataUtils.eip712Hash(data, version);\n  const sig = (0, util_1.ecsign)(messageHash, privateKey);\n  return (0, utils_1.concatSig)((0, util_1.toBuffer)(sig.v), sig.r, sig.s);\n}\nexports.signTypedData = signTypedData;\n/**\n * Recover the address of the account that created the given EIP-712\n * signature. The version provided must match the version used to\n * create the signature.\n *\n * @param options - The signature recovery options.\n * @param options.data - The typed data that was signed.\n * @param options.signature - The '0x-prefixed hex encoded message signature.\n * @param options.version - The signing version to use.\n * @returns The '0x'-prefixed hex address of the signer.\n */\nfunction recoverTypedSignature({\n  data,\n  signature,\n  version\n}) {\n  validateVersion(version);\n  if ((0, utils_1.isNullish)(data)) {\n    throw new Error('Missing data parameter');\n  } else if ((0, utils_1.isNullish)(signature)) {\n    throw new Error('Missing signature parameter');\n  }\n  const messageHash = version === SignTypedDataVersion.V1 ? _typedSignatureHash(data) : exports.TypedDataUtils.eip712Hash(data, version);\n  const publicKey = (0, utils_1.recoverPublicKey)(messageHash, signature);\n  const sender = (0, util_1.publicToAddress)(publicKey);\n  return (0, util_1.bufferToHex)(sender);\n}\nexports.recoverTypedSignature = recoverTypedSignature;","map":{"version":3,"names":["ethjs_util_1","require","util_1","keccak_1","ethereumjs_abi_utils_1","utils_1","SignTypedDataVersion","exports","TYPED_MESSAGE_SCHEMA","type","properties","types","additionalProperties","items","name","required","primaryType","domain","message","validateVersion","version","allowedVersions","Object","keys","includes","Error","join","encodeField","value","V3","V4","undefined","arrToBufArr","keccak256","encodeData","numberToBuffer","isHexString","prepend","length","Buffer","from","slice","lastIndexOf","parsedType","typeValuePairs","map","item","rawEncode","t","v","data","encodedTypes","encodedValues","hashType","field","push","encodeType","result","unsortedDeps","findTypeDependencies","delete","deps","Array","sort","children","results","Set","match","has","add","hashStruct","encodedHashType","sanitizeData","sanitizedData","key","assign","EIP712Domain","eip712Hash","typedData","parts","concat","TypedDataUtils","typedSignatureHash","hashBuffer","_typedSignatureHash","bufferToHex","error","e","legacyToBuffer","schema","solidityPack","fill","signTypedData","privateKey","isNullish","messageHash","V1","sig","ecsign","concatSig","toBuffer","r","s","recoverTypedSignature","signature","publicKey","recoverPublicKey","sender","publicToAddress"],"sources":["C:\\Users\\User\\OneDrive\\Desktop\\encrypt-sign-app\\node_modules\\@metamask\\eth-sig-util\\src\\sign-typed-data.ts"],"sourcesContent":["import { isHexString } from 'ethjs-util';\nimport {\n  arrToBufArr,\n  bufferToHex,\n  ecsign,\n  publicToAddress,\n  toBuffer,\n} from '@ethereumjs/util';\nimport { keccak256 } from 'ethereum-cryptography/keccak';\nimport { rawEncode, solidityPack } from './ethereumjs-abi-utils';\nimport {\n  concatSig,\n  isNullish,\n  legacyToBuffer,\n  recoverPublicKey,\n  numberToBuffer,\n} from './utils';\n\n/**\n * This is the message format used for `V1` of `signTypedData`.\n */\nexport type TypedDataV1 = TypedDataV1Field[];\n\n/**\n * This represents a single field in a `V1` `signTypedData` message.\n *\n * @property name - The name of the field.\n * @property type - The type of a field (must be a supported Solidity type).\n * @property value - The value of the field.\n */\nexport interface TypedDataV1Field {\n  name: string;\n  type: string;\n  value: any;\n}\n\n/**\n * Represents the version of `signTypedData` being used.\n *\n * V1 is based upon [an early version of EIP-712](https://github.com/ethereum/EIPs/pull/712/commits/21abe254fe0452d8583d5b132b1d7be87c0439ca)\n * that lacked some later security improvements, and should generally be neglected in favor of\n * later versions.\n *\n * V3 is based on EIP-712, except that arrays and recursive data structures are not supported.\n *\n * V4 is based on EIP-712, and includes full support of arrays and recursive data structures.\n */\nexport enum SignTypedDataVersion {\n  V1 = 'V1',\n  V3 = 'V3',\n  V4 = 'V4',\n}\n\nexport interface MessageTypeProperty {\n  name: string;\n  type: string;\n}\n\nexport interface MessageTypes {\n  EIP712Domain: MessageTypeProperty[];\n  [additionalProperties: string]: MessageTypeProperty[];\n}\n\n/**\n * This is the message format used for `signTypeData`, for all versions\n * except `V1`.\n *\n * @template T - The custom types used by this message.\n * @property types - The custom types used by this message.\n * @property primaryType - The type of the message.\n * @property domain - Signing domain metadata. The signing domain is the intended context for the\n * signature (e.g. the dapp, protocol, etc. that it's intended for). This data is used to\n * construct the domain seperator of the message.\n * @property domain.name - The name of the signing domain.\n * @property domain.version - The current major version of the signing domain.\n * @property domain.chainId - The chain ID of the signing domain.\n * @property domain.verifyingContract - The address of the contract that can verify the signature.\n * @property domain.salt - A disambiguating salt for the protocol.\n * @property message - The message to be signed.\n */\nexport interface TypedMessage<T extends MessageTypes> {\n  types: T;\n  primaryType: keyof T;\n  domain: {\n    name?: string;\n    version?: string;\n    chainId?: number;\n    verifyingContract?: string;\n    salt?: ArrayBuffer;\n  };\n  message: Record<string, unknown>;\n}\n\nexport const TYPED_MESSAGE_SCHEMA = {\n  type: 'object',\n  properties: {\n    types: {\n      type: 'object',\n      additionalProperties: {\n        type: 'array',\n        items: {\n          type: 'object',\n          properties: {\n            name: { type: 'string' },\n            type: { type: 'string' },\n          },\n          required: ['name', 'type'],\n        },\n      },\n    },\n    primaryType: { type: 'string' },\n    domain: { type: 'object' },\n    message: { type: 'object' },\n  },\n  required: ['types', 'primaryType', 'domain', 'message'],\n};\n\n/**\n * Validate that the given value is a valid version string.\n *\n * @param version - The version value to validate.\n * @param allowedVersions - A list of allowed versions. If omitted, all versions are assumed to be\n * allowed.\n */\nfunction validateVersion(\n  version: SignTypedDataVersion,\n  allowedVersions?: SignTypedDataVersion[],\n) {\n  if (!Object.keys(SignTypedDataVersion).includes(version)) {\n    throw new Error(`Invalid version: '${version}'`);\n  } else if (allowedVersions && !allowedVersions.includes(version)) {\n    throw new Error(\n      `SignTypedDataVersion not allowed: '${version}'. Allowed versions are: ${allowedVersions.join(\n        ', ',\n      )}`,\n    );\n  }\n}\n\n/**\n * Encode a single field.\n *\n * @param types - All type definitions.\n * @param name - The name of the field to encode.\n * @param type - The type of the field being encoded.\n * @param value - The value to encode.\n * @param version - The EIP-712 version the encoding should comply with.\n * @returns Encoded representation of the field.\n */\nfunction encodeField(\n  types: Record<string, MessageTypeProperty[]>,\n  name: string,\n  type: string,\n  value: any,\n  version: SignTypedDataVersion.V3 | SignTypedDataVersion.V4,\n): [type: string, value: any] {\n  validateVersion(version, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);\n\n  if (types[type] !== undefined) {\n    return [\n      'bytes32',\n      version === SignTypedDataVersion.V4 && value == null // eslint-disable-line no-eq-null\n        ? '0x0000000000000000000000000000000000000000000000000000000000000000'\n        : arrToBufArr(keccak256(encodeData(type, value, types, version))),\n    ];\n  }\n\n  if (value === undefined) {\n    throw new Error(`missing value for field ${name} of type ${type}`);\n  }\n\n  if (type === 'bytes') {\n    if (typeof value === 'number') {\n      value = numberToBuffer(value);\n    } else if (isHexString(value)) {\n      const prepend = value.length % 2 ? '0' : '';\n      value = Buffer.from(prepend + value.slice(2), 'hex');\n    } else {\n      value = Buffer.from(value, 'utf8');\n    }\n    return ['bytes32', arrToBufArr(keccak256(value))];\n  }\n\n  if (type === 'string') {\n    if (typeof value === 'number') {\n      value = numberToBuffer(value);\n    } else {\n      value = Buffer.from(value ?? '', 'utf8');\n    }\n    return ['bytes32', arrToBufArr(keccak256(value))];\n  }\n\n  if (type.lastIndexOf(']') === type.length - 1) {\n    if (version === SignTypedDataVersion.V3) {\n      throw new Error(\n        'Arrays are unimplemented in encodeData; use V4 extension',\n      );\n    }\n    const parsedType = type.slice(0, type.lastIndexOf('['));\n    const typeValuePairs = value.map((item) =>\n      encodeField(types, name, parsedType, item, version),\n    );\n    return [\n      'bytes32',\n      arrToBufArr(\n        keccak256(\n          rawEncode(\n            typeValuePairs.map(([t]) => t),\n            typeValuePairs.map(([, v]) => v),\n          ),\n        ),\n      ),\n    ];\n  }\n\n  return [type, value];\n}\n\n/**\n * Encodes an object by encoding and concatenating each of its members.\n *\n * @param primaryType - The root type.\n * @param data - The object to encode.\n * @param types - Type definitions for all types included in the message.\n * @param version - The EIP-712 version the encoding should comply with.\n * @returns An encoded representation of an object.\n */\nfunction encodeData(\n  primaryType: string,\n  data: Record<string, unknown>,\n  types: Record<string, MessageTypeProperty[]>,\n  version: SignTypedDataVersion.V3 | SignTypedDataVersion.V4,\n): Buffer {\n  validateVersion(version, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);\n\n  const encodedTypes = ['bytes32'];\n  const encodedValues: unknown[] = [hashType(primaryType, types)];\n\n  for (const field of types[primaryType]) {\n    if (version === SignTypedDataVersion.V3 && data[field.name] === undefined) {\n      continue;\n    }\n    const [type, value] = encodeField(\n      types,\n      field.name,\n      field.type,\n      data[field.name],\n      version,\n    );\n    encodedTypes.push(type);\n    encodedValues.push(value);\n  }\n\n  return rawEncode(encodedTypes, encodedValues);\n}\n\n/**\n * Encodes the type of an object by encoding a comma delimited list of its members.\n *\n * @param primaryType - The root type to encode.\n * @param types - Type definitions for all types included in the message.\n * @returns An encoded representation of the primary type.\n */\nfunction encodeType(\n  primaryType: string,\n  types: Record<string, MessageTypeProperty[]>,\n): string {\n  let result = '';\n  const unsortedDeps = findTypeDependencies(primaryType, types);\n  unsortedDeps.delete(primaryType);\n\n  const deps = [primaryType, ...Array.from(unsortedDeps).sort()];\n  for (const type of deps) {\n    const children = types[type];\n    if (!children) {\n      throw new Error(`No type definition specified: ${type}`);\n    }\n\n    result += `${type}(${types[type]\n      .map(({ name, type: t }) => `${t} ${name}`)\n      .join(',')})`;\n  }\n\n  return result;\n}\n\n/**\n * Finds all types within a type definition object.\n *\n * @param primaryType - The root type.\n * @param types - Type definitions for all types included in the message.\n * @param results - The current set of accumulated types.\n * @returns The set of all types found in the type definition.\n */\nfunction findTypeDependencies(\n  primaryType: string,\n  types: Record<string, MessageTypeProperty[]>,\n  results: Set<string> = new Set(),\n): Set<string> {\n  [primaryType] = primaryType.match(/^\\w*/u);\n  if (results.has(primaryType) || types[primaryType] === undefined) {\n    return results;\n  }\n\n  results.add(primaryType);\n\n  for (const field of types[primaryType]) {\n    findTypeDependencies(field.type, types, results);\n  }\n  return results;\n}\n\n/**\n * Hashes an object.\n *\n * @param primaryType - The root type.\n * @param data - The object to hash.\n * @param types - Type definitions for all types included in the message.\n * @param version - The EIP-712 version the encoding should comply with.\n * @returns The hash of the object.\n */\nfunction hashStruct(\n  primaryType: string,\n  data: Record<string, unknown>,\n  types: Record<string, MessageTypeProperty[]>,\n  version: SignTypedDataVersion.V3 | SignTypedDataVersion.V4,\n): Buffer {\n  validateVersion(version, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);\n\n  return arrToBufArr(keccak256(encodeData(primaryType, data, types, version)));\n}\n\n/**\n * Hashes the type of an object.\n *\n * @param primaryType - The root type to hash.\n * @param types - Type definitions for all types included in the message.\n * @returns The hash of the object type.\n */\nfunction hashType(\n  primaryType: string,\n  types: Record<string, MessageTypeProperty[]>,\n): Buffer {\n  const encodedHashType = Buffer.from(encodeType(primaryType, types), 'utf-8');\n  return arrToBufArr(keccak256(encodedHashType));\n}\n\n/**\n * Removes properties from a message object that are not defined per EIP-712.\n *\n * @param data - The typed message object.\n * @returns The typed message object with only allowed fields.\n */\nfunction sanitizeData<T extends MessageTypes>(\n  data: TypedMessage<T>,\n): TypedMessage<T> {\n  const sanitizedData: Partial<TypedMessage<T>> = {};\n  for (const key in TYPED_MESSAGE_SCHEMA.properties) {\n    if (data[key]) {\n      sanitizedData[key] = data[key];\n    }\n  }\n\n  if ('types' in sanitizedData) {\n    sanitizedData.types = { EIP712Domain: [], ...sanitizedData.types };\n  }\n  return sanitizedData as Required<TypedMessage<T>>;\n}\n\n/**\n * Hash a typed message according to EIP-712. The returned message starts with the EIP-712 prefix,\n * which is \"1901\", followed by the hash of the domain separator, then the data (if any).\n * The result is hashed again and returned.\n *\n * This function does not sign the message. The resulting hash must still be signed to create an\n * EIP-712 signature.\n *\n * @param typedData - The typed message to hash.\n * @param version - The EIP-712 version the encoding should comply with.\n * @returns The hash of the typed message.\n */\nfunction eip712Hash<T extends MessageTypes>(\n  typedData: TypedMessage<T>,\n  version: SignTypedDataVersion.V3 | SignTypedDataVersion.V4,\n): Buffer {\n  validateVersion(version, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);\n\n  const sanitizedData = sanitizeData(typedData);\n  const parts = [Buffer.from('1901', 'hex')];\n  parts.push(\n    hashStruct(\n      'EIP712Domain',\n      sanitizedData.domain,\n      sanitizedData.types,\n      version,\n    ),\n  );\n\n  if (sanitizedData.primaryType !== 'EIP712Domain') {\n    parts.push(\n      hashStruct(\n        // TODO: Validate that this is a string, so this type cast can be removed.\n        sanitizedData.primaryType as string,\n        sanitizedData.message,\n        sanitizedData.types,\n        version,\n      ),\n    );\n  }\n  return arrToBufArr(keccak256(Buffer.concat(parts)));\n}\n\n/**\n * A collection of utility functions used for signing typed data.\n */\nexport const TypedDataUtils = {\n  encodeData,\n  encodeType,\n  findTypeDependencies,\n  hashStruct,\n  hashType,\n  sanitizeData,\n  eip712Hash,\n};\n\n/**\n * Generate the \"V1\" hash for the provided typed message.\n *\n * The hash will be generated in accordance with an earlier version of the EIP-712\n * specification. This hash is used in `signTypedData_v1`.\n *\n * @param typedData - The typed message.\n * @returns The '0x'-prefixed hex encoded hash representing the type of the provided message.\n */\nexport function typedSignatureHash(typedData: TypedDataV1Field[]): string {\n  const hashBuffer = _typedSignatureHash(typedData);\n  return bufferToHex(hashBuffer);\n}\n\n/**\n * Generate the \"V1\" hash for the provided typed message.\n *\n * The hash will be generated in accordance with an earlier version of the EIP-712\n * specification. This hash is used in `signTypedData_v1`.\n *\n * @param typedData - The typed message.\n * @returns The hash representing the type of the provided message.\n */\nfunction _typedSignatureHash(typedData: TypedDataV1): Buffer {\n  const error = new Error('Expect argument to be non-empty array');\n  if (\n    typeof typedData !== 'object' ||\n    !('length' in typedData) ||\n    !typedData.length\n  ) {\n    throw error;\n  }\n\n  const data = typedData.map(function (e) {\n    if (e.type !== 'bytes') {\n      return e.value;\n    }\n\n    return legacyToBuffer(e.value);\n  });\n  const types = typedData.map(function (e) {\n    return e.type;\n  });\n  const schema = typedData.map(function (e) {\n    if (!e.name) {\n      throw error;\n    }\n    return `${e.type} ${e.name}`;\n  });\n\n  return arrToBufArr(\n    keccak256(\n      solidityPack(\n        ['bytes32', 'bytes32'],\n        [\n          keccak256(\n            solidityPack(new Array(typedData.length).fill('string'), schema),\n          ),\n          keccak256(solidityPack(types, data)),\n        ],\n      ),\n    ),\n  );\n}\n\n/**\n * Sign typed data according to EIP-712. The signing differs based upon the `version`.\n *\n * V1 is based upon [an early version of EIP-712](https://github.com/ethereum/EIPs/pull/712/commits/21abe254fe0452d8583d5b132b1d7be87c0439ca)\n * that lacked some later security improvements, and should generally be neglected in favor of\n * later versions.\n *\n * V3 is based on [EIP-712](https://eips.ethereum.org/EIPS/eip-712), except that arrays and\n * recursive data structures are not supported.\n *\n * V4 is based on [EIP-712](https://eips.ethereum.org/EIPS/eip-712), and includes full support of\n * arrays and recursive data structures.\n *\n * @param options - The signing options.\n * @param options.privateKey - The private key to sign with.\n * @param options.data - The typed data to sign.\n * @param options.version - The signing version to use.\n * @returns The '0x'-prefixed hex encoded signature.\n */\nexport function signTypedData<\n  V extends SignTypedDataVersion,\n  T extends MessageTypes,\n>({\n  privateKey,\n  data,\n  version,\n}: {\n  privateKey: Buffer;\n  data: V extends 'V1' ? TypedDataV1 : TypedMessage<T>;\n  version: V;\n}): string {\n  validateVersion(version);\n  if (isNullish(data)) {\n    throw new Error('Missing data parameter');\n  } else if (isNullish(privateKey)) {\n    throw new Error('Missing private key parameter');\n  }\n\n  const messageHash =\n    version === SignTypedDataVersion.V1\n      ? _typedSignatureHash(data as TypedDataV1)\n      : TypedDataUtils.eip712Hash(\n          data as TypedMessage<T>,\n          version as SignTypedDataVersion.V3 | SignTypedDataVersion.V4,\n        );\n  const sig = ecsign(messageHash, privateKey);\n  return concatSig(toBuffer(sig.v), sig.r, sig.s);\n}\n\n/**\n * Recover the address of the account that created the given EIP-712\n * signature. The version provided must match the version used to\n * create the signature.\n *\n * @param options - The signature recovery options.\n * @param options.data - The typed data that was signed.\n * @param options.signature - The '0x-prefixed hex encoded message signature.\n * @param options.version - The signing version to use.\n * @returns The '0x'-prefixed hex address of the signer.\n */\nexport function recoverTypedSignature<\n  V extends SignTypedDataVersion,\n  T extends MessageTypes,\n>({\n  data,\n  signature,\n  version,\n}: {\n  data: V extends 'V1' ? TypedDataV1 : TypedMessage<T>;\n  signature: string;\n  version: V;\n}): string {\n  validateVersion(version);\n  if (isNullish(data)) {\n    throw new Error('Missing data parameter');\n  } else if (isNullish(signature)) {\n    throw new Error('Missing signature parameter');\n  }\n\n  const messageHash =\n    version === SignTypedDataVersion.V1\n      ? _typedSignatureHash(data as TypedDataV1)\n      : TypedDataUtils.eip712Hash(\n          data as TypedMessage<T>,\n          version as SignTypedDataVersion.V3 | SignTypedDataVersion.V4,\n        );\n  const publicKey = recoverPublicKey(messageHash, signature);\n  const sender = publicToAddress(publicKey);\n  return bufferToHex(sender);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}