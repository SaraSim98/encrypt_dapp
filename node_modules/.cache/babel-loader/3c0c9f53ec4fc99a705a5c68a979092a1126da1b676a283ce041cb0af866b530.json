{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\OneDrive\\\\Desktop\\\\firma\\\\signature-generator-app\\\\src\\\\components\\\\EncryptWithMetaMask.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { encrypt } from \"@metamask/eth-sig-util\";\nimport { Buffer } from \"buffer\";\nimport { keccak256, getBytes, Signature, BrowserProvider } from \"ethers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function EncryptAndSignSeparate() {\n  _s();\n  const [message, setMessage] = useState(\"\");\n  const [ciphertextHex, setCiphertextHex] = useState(\"\");\n  const [hashHex, setHashHex] = useState(\"\");\n  const [hashDec, setHashDec] = useState(\"\");\n  const [results, setResults] = useState(null);\n  const [error, setError] = useState(\"\");\n  const [connectedAccount, setConnectedAccount] = useState(\"\"); // Per mostrare l'account connesso\n  const [provider, setProvider] = useState(null); // Stato per l'istanza del provider\n\n  // --- Funzione per inizializzare il provider ethers.js ---\n  const initializeProvider = () => {\n    if (!window.ethereum) {\n      setError(\"MetaMask o un altro wallet compatibile non è installato!\");\n      return null;\n    }\n    const ethersProvider = new BrowserProvider(window.ethereum);\n    setProvider(ethersProvider); // Salva il provider nello stato\n    return ethersProvider;\n  };\n\n  // --- Funzione per connettere un account specifico (o richiederne uno) ---\n  const connectAndGetAccount = async () => {\n    try {\n      let currentProvider = provider;\n      if (!currentProvider) {\n        currentProvider = initializeProvider();\n        if (!currentProvider) return null;\n      }\n\n      // Richiede i permessi e ottiene l'account.\n      // MetaMask chiederà all'utente di selezionare/confermare l'account.\n      await currentProvider.send(\"wallet_requestPermissions\", [{\n        eth_accounts: {}\n      }]);\n      const signer = await currentProvider.getSigner();\n      const address = await signer.getAddress();\n      setConnectedAccount(address); // Aggiorna l'account connesso nell'UI\n      return address;\n    } catch (err) {\n      console.error(\"Errore durante la connessione dell'account:\", err);\n      setError(\"Errore durante la connessione: \" + (err.message || \"Sconosciuto\"));\n      setConnectedAccount(\"\");\n      return null;\n    }\n  };\n\n  // --- Gestione della cifratura con l'account Alfa ---\n  const handleEncryptWithAlfa = async () => {\n    setError(\"\");\n    setResults(null);\n    setCiphertextHex(\"\"); // Resetta i valori precedenti\n    setHashHex(\"\");\n    setHashDec(\"\");\n    try {\n      const alfaAddress = await connectAndGetAccount(); // Connetti/ottieni l'account per Alfa\n      if (!alfaAddress) return; // Se la connessione fallisce, esci\n\n      // Ottieni la chiave pubblica di crittografia dall'account Alfa\n      const currentProvider = provider || initializeProvider(); // Assicurati di avere il provider\n      if (!currentProvider) return;\n      const publicKey = await currentProvider.send(\"eth_getEncryptionPublicKey\", [alfaAddress]);\n      const encryptedObject = encrypt({\n        publicKey,\n        data: message,\n        version: \"x25519-xsalsa20-poly1305\"\n      });\n      console.log(JSON.stringify(encryptedObject, null, 2));\n      const ciphertextBase64 = encryptedObject.ciphertext;\n      const hex = Buffer.from(ciphertextBase64, \"base64\").toString(\"hex\");\n      const ciphertextBytes = Buffer.from(hex, \"hex\");\n      const hash = keccak256(ciphertextBytes);\n      const hashBigInt = BigInt(hash);\n      setCiphertextHex(hex);\n      setHashHex(hash);\n      setHashDec(hashBigInt.toString());\n      setError(\"Messaggio cifrato con successo da Alfa!\");\n    } catch (err) {\n      console.error(err);\n      setError(\"Errore durante la cifratura con Alfa: \" + (err.message || \"Sconosciuto\"));\n    }\n  };\n\n  // --- Gestione della firma con Ground Station B (Beta) ---\n  const handleSignWithBeta = async () => {\n    setError(\"\");\n    try {\n      if (!hashHex) {\n        setError(\"Per favore, cifra prima il messaggio per generare l'hash.\");\n        return;\n      }\n      const betaAddress = await connectAndGetAccount(); // Connetti/ottieni l'account per Beta\n      if (!betaAddress) return; // Se la connessione fallisce, esci\n\n      const currentProvider = provider || initializeProvider(); // Assicurati di avere il provider\n      if (!currentProvider) return;\n      const signer = await currentProvider.getSigner();\n      // ethers.js userà l'account attualmente connesso (betaAddress) per la firma.\n      // MetaMask chiederà conferma se l'account connesso non è quello desiderato.\n\n      const flatSig = await signer.signMessage(getBytes(hashHex));\n      const sigObj = Signature.from(flatSig);\n      setResults({\n        signature: flatSig,\n        v: sigObj.v,\n        r: sigObj.r,\n        s: sigObj.s,\n        betaAddress: betaAddress // Questo sarà l'indirizzo dell'account che ha firmato\n      });\n      setError(\"Messaggio firmato con successo da Ground Station B!\");\n    } catch (err) {\n      console.error(err);\n      setError(\"Errore durante la firma con Ground Station B: \" + (err.message || \"Sconosciuto\"));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: \"1rem\",\n      fontFamily: \"Arial, sans-serif\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Cifra e Firma un Messaggio\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Account Connesso: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: connectedAccount || \"Nessuno\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 28\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      placeholder: \"Scrivi un messaggio\",\n      value: message,\n      onChange: e => setMessage(e.target.value),\n      rows: 4,\n      style: {\n        width: \"100%\",\n        marginBottom: \"1rem\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleEncryptWithAlfa,\n      style: {\n        marginBottom: \"1rem\"\n      },\n      children: \"Cifra con Alfa (Mittente)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this), ciphertextHex && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: \"1rem\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Dati Cifrati\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Messaggio cifrato (hex):\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 14\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        readOnly: true,\n        value: \"0x\" + ciphertextHex,\n        style: {\n          width: \"100%\",\n          height: \"80px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Hash (hex):\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 14\n        }, this), \" \", hashHex]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Hash (decimale):\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 14\n        }, this), \" \", hashDec]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSignWithBeta,\n        style: {\n          marginTop: \"1rem\"\n        },\n        children: \"Firma con Ground Station B (Relay)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 9\n    }, this), results && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: \"2rem\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Firma\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"code\", {\n            children: \"v:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 17\n          }, this), \" \", results.v]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"code\", {\n            children: \"r:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 17\n          }, this), \" \", results.r]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"code\", {\n            children: \"s:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 17\n          }, this), \" \", results.s]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"code\", {\n            children: \"Indirizzo di Ground Station B:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 17\n          }, this), \" \", results.betaAddress]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n}\n_s(EncryptAndSignSeparate, \"o/K5hGdHQxnIfR2XmIPluQjZjJg=\");\n_c = EncryptAndSignSeparate;\nvar _c;\n$RefreshReg$(_c, \"EncryptAndSignSeparate\");","map":{"version":3,"names":["React","useState","encrypt","Buffer","keccak256","getBytes","Signature","BrowserProvider","jsxDEV","_jsxDEV","EncryptAndSignSeparate","_s","message","setMessage","ciphertextHex","setCiphertextHex","hashHex","setHashHex","hashDec","setHashDec","results","setResults","error","setError","connectedAccount","setConnectedAccount","provider","setProvider","initializeProvider","window","ethereum","ethersProvider","connectAndGetAccount","currentProvider","send","eth_accounts","signer","getSigner","address","getAddress","err","console","handleEncryptWithAlfa","alfaAddress","publicKey","encryptedObject","data","version","log","JSON","stringify","ciphertextBase64","ciphertext","hex","from","toString","ciphertextBytes","hash","hashBigInt","BigInt","handleSignWithBeta","betaAddress","flatSig","signMessage","sigObj","signature","v","r","s","style","padding","fontFamily","children","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","value","onChange","e","target","rows","width","marginBottom","onClick","marginTop","readOnly","height","color","_c","$RefreshReg$"],"sources":["C:/Users/User/OneDrive/Desktop/firma/signature-generator-app/src/components/EncryptWithMetaMask.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { encrypt } from \"@metamask/eth-sig-util\";\nimport { Buffer } from \"buffer\";\nimport { keccak256, getBytes, Signature, BrowserProvider } from \"ethers\";\n\nexport default function EncryptAndSignSeparate() {\n  const [message, setMessage] = useState(\"\");\n  const [ciphertextHex, setCiphertextHex] = useState(\"\");\n  const [hashHex, setHashHex] = useState(\"\");\n  const [hashDec, setHashDec] = useState(\"\");\n  const [results, setResults] = useState(null);\n  const [error, setError] = useState(\"\");\n  const [connectedAccount, setConnectedAccount] = useState(\"\"); // Per mostrare l'account connesso\n  const [provider, setProvider] = useState(null); // Stato per l'istanza del provider\n\n  // --- Funzione per inizializzare il provider ethers.js ---\n  const initializeProvider = () => {\n    if (!window.ethereum) {\n      setError(\"MetaMask o un altro wallet compatibile non è installato!\");\n      return null;\n    }\n    const ethersProvider = new BrowserProvider(window.ethereum);\n    setProvider(ethersProvider); // Salva il provider nello stato\n    return ethersProvider;\n  };\n\n  // --- Funzione per connettere un account specifico (o richiederne uno) ---\n  const connectAndGetAccount = async () => {\n    try {\n      let currentProvider = provider;\n      if (!currentProvider) {\n        currentProvider = initializeProvider();\n        if (!currentProvider) return null;\n      }\n\n      // Richiede i permessi e ottiene l'account.\n      // MetaMask chiederà all'utente di selezionare/confermare l'account.\n      await currentProvider.send(\"wallet_requestPermissions\", [{ eth_accounts: {} }]);\n      const signer = await currentProvider.getSigner();\n      const address = await signer.getAddress();\n      setConnectedAccount(address); // Aggiorna l'account connesso nell'UI\n      return address;\n    } catch (err) {\n      console.error(\"Errore durante la connessione dell'account:\", err);\n      setError(\"Errore durante la connessione: \" + (err.message || \"Sconosciuto\"));\n      setConnectedAccount(\"\");\n      return null;\n    }\n  };\n\n  // --- Gestione della cifratura con l'account Alfa ---\n  const handleEncryptWithAlfa = async () => {\n    setError(\"\");\n    setResults(null);\n    setCiphertextHex(\"\"); // Resetta i valori precedenti\n    setHashHex(\"\");\n    setHashDec(\"\");\n\n    try {\n      const alfaAddress = await connectAndGetAccount(); // Connetti/ottieni l'account per Alfa\n      if (!alfaAddress) return; // Se la connessione fallisce, esci\n\n      // Ottieni la chiave pubblica di crittografia dall'account Alfa\n      const currentProvider = provider || initializeProvider(); // Assicurati di avere il provider\n      if (!currentProvider) return;\n      \n      const publicKey = await currentProvider.send(\"eth_getEncryptionPublicKey\", [alfaAddress]);\n\n      const encryptedObject = encrypt({\n        publicKey,\n        data: message,\n        version: \"x25519-xsalsa20-poly1305\",\n      });\n      console.log(JSON.stringify(encryptedObject, null, 2));\n\n      const ciphertextBase64 = encryptedObject.ciphertext;\n      const hex = Buffer.from(ciphertextBase64, \"base64\").toString(\"hex\");\n\n      const ciphertextBytes = Buffer.from(hex, \"hex\");\n      const hash = keccak256(ciphertextBytes);\n      const hashBigInt = BigInt(hash);\n\n      setCiphertextHex(hex);\n      setHashHex(hash);\n      setHashDec(hashBigInt.toString());\n      setError(\"Messaggio cifrato con successo da Alfa!\");\n\n    } catch (err) {\n      console.error(err);\n      setError(\"Errore durante la cifratura con Alfa: \" + (err.message || \"Sconosciuto\"));\n    }\n  };\n\n  // --- Gestione della firma con Ground Station B (Beta) ---\n  const handleSignWithBeta = async () => {\n    setError(\"\");\n    try {\n      if (!hashHex) {\n        setError(\"Per favore, cifra prima il messaggio per generare l'hash.\");\n        return;\n      }\n\n      const betaAddress = await connectAndGetAccount(); // Connetti/ottieni l'account per Beta\n      if (!betaAddress) return; // Se la connessione fallisce, esci\n\n      const currentProvider = provider || initializeProvider(); // Assicurati di avere il provider\n      if (!currentProvider) return;\n\n      const signer = await currentProvider.getSigner(); \n      // ethers.js userà l'account attualmente connesso (betaAddress) per la firma.\n      // MetaMask chiederà conferma se l'account connesso non è quello desiderato.\n\n      const flatSig = await signer.signMessage(getBytes(hashHex));\n      const sigObj = Signature.from(flatSig);\n\n      setResults({\n        signature: flatSig,\n        v: sigObj.v,\n        r: sigObj.r,\n        s: sigObj.s,\n        betaAddress: betaAddress, // Questo sarà l'indirizzo dell'account che ha firmato\n      });\n      setError(\"Messaggio firmato con successo da Ground Station B!\");\n\n    } catch (err) {\n      console.error(err);\n      setError(\"Errore durante la firma con Ground Station B: \" + (err.message || \"Sconosciuto\"));\n    }\n  };\n\n  return (\n    <div style={{ padding: \"1rem\", fontFamily: \"Arial, sans-serif\" }}>\n      <h2>Cifra e Firma un Messaggio</h2>\n      \n      <p>Account Connesso: <strong>{connectedAccount || \"Nessuno\"}</strong></p>\n\n      <textarea\n        placeholder=\"Scrivi un messaggio\"\n        value={message}\n        onChange={(e) => setMessage(e.target.value)}\n        rows={4}\n        style={{ width: \"100%\", marginBottom: \"1rem\" }}\n      />\n\n      <button onClick={handleEncryptWithAlfa} style={{ marginBottom: \"1rem\" }}>\n        Cifra con Alfa (Mittente)\n      </button>\n\n      {ciphertextHex && (\n        <div style={{ marginTop: \"1rem\" }}>\n          <h3>Dati Cifrati</h3>\n          <p><strong>Messaggio cifrato (hex):</strong></p>\n          <textarea readOnly value={\"0x\" + ciphertextHex} style={{ width: \"100%\", height: \"80px\" }} />\n          <p><strong>Hash (hex):</strong> {hashHex}</p>\n          <p><strong>Hash (decimale):</strong> {hashDec}</p>\n\n          <button onClick={handleSignWithBeta} style={{ marginTop: \"1rem\" }}>\n            Firma con Ground Station B (Relay)\n          </button>\n        </div>\n      )}\n\n      {results && (\n        <div style={{ marginTop: \"2rem\" }}>\n          <h3>Firma</h3>\n          <ul>\n            <li><code>v:</code> {results.v}</li>\n            <li><code>r:</code> {results.r}</li>\n            <li><code>s:</code> {results.s}</li>\n            <li><code>Indirizzo di Ground Station B:</code> {results.betaAddress}</li>\n          </ul>\n        </div>\n      )}\n\n      {error && <p style={{ color: \"red\" }}>{error}</p>}\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}