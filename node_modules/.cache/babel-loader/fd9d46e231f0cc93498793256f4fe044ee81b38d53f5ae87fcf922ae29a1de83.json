{"ast":null,"code":"\"use strict\";\n\n/* eslint jsdoc/require-description: 0 */\n/* eslint jsdoc/require-returns: 0 */\n/* eslint jsdoc/match-description: 0 */\n/* eslint jsdoc/require-param-description: 0 */\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.rawEncode = exports.parseNumber = exports.solidityPack = void 0;\nconst util_1 = require(\"@ethereumjs/util\");\nconst ethjs_util_1 = require(\"ethjs-util\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst utils_1 = require(\"./utils\");\n//\n// Methods borrowed and somewhat adapted from ethereumjs-abi@0.6.8:\n// https://npmfs.com/package/ethereumjs-abi/0.6.8/lib/index.js\n//\n/**\n * Packs non-standard encoded values packed according to their respective type in types in a buffer.\n *\n * @param types - Array of types of each value to encode.\n * @param values - Array of values to encode.\n * @returns A buffer containing the packed values.\n */\nfunction solidityPack(types, values) {\n  if (types.length !== values.length) {\n    throw new Error('Number of types are not matching the values');\n  }\n  const ret = [];\n  for (let i = 0; i < types.length; i++) {\n    const type = elementaryName(types[i]);\n    const value = values[i];\n    ret.push(solidityHexValue(type, value, null));\n  }\n  return Buffer.concat(ret);\n}\nexports.solidityPack = solidityPack;\n/**\n * Checks if a value is an array (represented as a string).\n *\n * @param type - The value to check whether it is an array.\n * @returns A boolean indicating whether the passed value is an array.\n */\nfunction isArray(type) {\n  return type.lastIndexOf(']') === type.length - 1;\n}\n/**\n * Parse array type for packing solidity values.\n *\n * @param type - A string that may be an array to parse.\n * @returns A parsed value from the array.\n */\nfunction parseTypeArray(type) {\n  const tmp = type.match(/(.*)\\[(.*?)\\]$/u);\n  if (tmp) {\n    return tmp[2] === '' ? 'dynamic' : parseInt(tmp[2], 10);\n  }\n  return null;\n}\n/**\n * Parse N from type<N>.\n *\n * @param type - Value to parse.\n * @returns Parsed value.\n */\nfunction parseTypeN(type) {\n  return parseInt(/^\\D+(\\d+)$/u.exec(type)[1], 10);\n}\n/**\n * Parse a number for determining a solidity hexvalue.\n *\n * @param arg - Number to parse.\n * @returns Parsed value.\n */\nfunction parseNumber(arg) {\n  const type = typeof arg;\n  if (type === 'string') {\n    if ((0, util_1.isHexPrefixed)(arg)) {\n      return new bn_js_1.default((0, ethjs_util_1.stripHexPrefix)(arg), 16);\n    }\n    return new bn_js_1.default(arg, 10);\n  } else if (type === 'number') {\n    return new bn_js_1.default(arg);\n  } else if (arg.toArray) {\n    // assume this is a BN for the moment, replace with BN.isBN soon\n    return arg;\n  }\n  throw new Error('Argument is not a number');\n}\nexports.parseNumber = parseNumber;\n/**\n * Get solidity hex value from type, value and bitsize inputs for packing these values in a buffer.\n *\n * @param type - The type of the value to encode.\n * @param value - The value to encode.\n * @param bitsize - The bitsize of the value to encode.\n * @returns The encoded soldity hex value.\n */\nfunction solidityHexValue(type, value, bitsize) {\n  // pass in bitsize = null if use default bitsize\n  let size, num;\n  if (isArray(type)) {\n    const subType = type.replace(/\\[.*?\\]/u, '');\n    if (!isArray(subType)) {\n      const arraySize = parseTypeArray(type);\n      if (arraySize !== 'dynamic' && arraySize !== 0 && value.length > arraySize) {\n        throw new Error(`Elements exceed array size: ${arraySize}`);\n      }\n    }\n    const arrayValues = value.map(function (v) {\n      return solidityHexValue(subType, v, 256);\n    });\n    return Buffer.concat(arrayValues);\n  } else if (type === 'bytes') {\n    return value;\n  } else if (type === 'string') {\n    return Buffer.from(value, 'utf8');\n  } else if (type === 'bool') {\n    bitsize = bitsize || 8;\n    const padding = Array(bitsize / 4).join('0');\n    return Buffer.from(value ? `${padding}1` : `${padding}0`, 'hex');\n  } else if (type === 'address') {\n    let bytesize = 20;\n    if (bitsize) {\n      bytesize = bitsize / 8;\n    }\n    return (0, util_1.setLengthLeft)((0, util_1.toBuffer)(value), bytesize);\n  } else if (type.startsWith('bytes')) {\n    size = parseTypeN(type);\n    if (size < 1 || size > 32) {\n      throw new Error(`Invalid bytes<N> width: ${size}`);\n    }\n    if (typeof value === 'number') {\n      value = (0, utils_1.normalize)(value);\n    }\n    return (0, util_1.setLengthRight)((0, util_1.toBuffer)(value), size);\n  } else if (type.startsWith('uint')) {\n    size = parseTypeN(type);\n    if (size % 8 || size < 8 || size > 256) {\n      throw new Error(`Invalid uint<N> width: ${size}`);\n    }\n    num = parseNumber(value);\n    if (num.bitLength() > size) {\n      throw new Error(`Supplied uint exceeds width: ${size} vs ${num.bitLength()}`);\n    }\n    bitsize = bitsize || size;\n    return num.toArrayLike(Buffer, 'be', bitsize / 8);\n  } else if (type.startsWith('int')) {\n    size = parseTypeN(type);\n    if (size % 8 || size < 8 || size > 256) {\n      throw new Error(`Invalid int<N> width: ${size}`);\n    }\n    num = parseNumber(value);\n    if (num.bitLength() > size) {\n      throw new Error(`Supplied int exceeds width: ${size} vs ${num.bitLength()}`);\n    }\n    bitsize = bitsize || size;\n    return num.toTwos(size).toArrayLike(Buffer, 'be', bitsize / 8);\n  }\n  // FIXME: support all other types\n  throw new Error(`Unsupported or invalid type: ${type}`);\n}\n/**\n * Gets the correct solidity type name.\n *\n * @param name - The type name for which we want the corresponding solidity type name.\n * @returns The solidity type name for the input value.\n */\nfunction elementaryName(name) {\n  if (name.startsWith('int[')) {\n    return `int256${name.slice(3)}`;\n  } else if (name === 'int') {\n    return 'int256';\n  } else if (name.startsWith('uint[')) {\n    return `uint256${name.slice(4)}`;\n  } else if (name === 'uint') {\n    return 'uint256';\n  } else if (name.startsWith('fixed[')) {\n    return `fixed128x128${name.slice(5)}`;\n  } else if (name === 'fixed') {\n    return 'fixed128x128';\n  } else if (name.startsWith('ufixed[')) {\n    return `ufixed128x128${name.slice(6)}`;\n  } else if (name === 'ufixed') {\n    return 'ufixed128x128';\n  }\n  return name;\n}\n/**\n * @param types\n * @param values\n */\nfunction rawEncode(types, values) {\n  const output = [];\n  const data = [];\n  let headLength = 0;\n  types.forEach(function (type) {\n    if (isArray(type)) {\n      const size = parseTypeArray(type);\n      // eslint-disable-next-line no-negated-condition\n      if (size !== 'dynamic') {\n        headLength += 32 * size;\n      } else {\n        headLength += 32;\n      }\n    } else {\n      headLength += 32;\n    }\n  });\n  for (let i = 0; i < types.length; i++) {\n    const type = elementaryName(types[i]);\n    const value = values[i];\n    const cur = encodeSingle(type, value);\n    // Use the head/tail method for storing dynamic data\n    if (isDynamic(type)) {\n      output.push(encodeSingle('uint256', headLength));\n      data.push(cur);\n      headLength += cur.length;\n    } else {\n      output.push(cur);\n    }\n  }\n  return Buffer.concat(output.concat(data));\n}\nexports.rawEncode = rawEncode;\n// Encodes a single item (can be dynamic array)\n// @returns: Buffer\n/**\n * @param type\n * @param arg\n */\nfunction encodeSingle(type, arg) {\n  let size, num, ret, i;\n  if (type === 'address') {\n    return encodeSingle('uint160', parseNumber(arg));\n  } else if (type === 'bool') {\n    return encodeSingle('uint8', arg ? 1 : 0);\n  } else if (type === 'string') {\n    return encodeSingle('bytes', Buffer.from(arg, 'utf8'));\n  } else if (isArray(type)) {\n    // this part handles fixed-length ([2]) and variable length ([]) arrays\n    // NOTE: we catch here all calls to arrays, that simplifies the rest\n    if (typeof arg.length === 'undefined') {\n      throw new Error('Not an array?');\n    }\n    size = parseTypeArray(type);\n    if (size !== 'dynamic' && size !== 0 && arg.length > size) {\n      throw new Error(`Elements exceed array size: ${size}`);\n    }\n    ret = [];\n    type = type.slice(0, type.lastIndexOf('['));\n    if (typeof arg === 'string') {\n      arg = JSON.parse(arg);\n    }\n    for (i in arg) {\n      if (Object.prototype.hasOwnProperty.call(arg, i)) {\n        ret.push(encodeSingle(type, arg[i]));\n      }\n    }\n    if (size === 'dynamic') {\n      const length = encodeSingle('uint256', arg.length);\n      ret.unshift(length);\n    }\n    return Buffer.concat(ret);\n  } else if (type === 'bytes') {\n    arg = Buffer.from(arg);\n    ret = Buffer.concat([encodeSingle('uint256', arg.length), arg]);\n    if (arg.length % 32 !== 0) {\n      ret = Buffer.concat([ret, (0, util_1.zeros)(32 - arg.length % 32)]);\n    }\n    return ret;\n  } else if (type.startsWith('bytes')) {\n    size = parseTypeN(type);\n    if (size < 1 || size > 32) {\n      throw new Error(`Invalid bytes<N> width: ${size}`);\n    }\n    if (typeof arg === 'number') {\n      arg = (0, utils_1.normalize)(arg);\n    }\n    return (0, util_1.setLengthRight)((0, util_1.toBuffer)(arg), 32);\n  } else if (type.startsWith('uint')) {\n    size = parseTypeN(type);\n    if (size % 8 || size < 8 || size > 256) {\n      throw new Error(`Invalid uint<N> width: ${size}`);\n    }\n    num = parseNumber(arg);\n    if (num.bitLength() > size) {\n      throw new Error(`Supplied uint exceeds width: ${size} vs ${num.bitLength()}`);\n    }\n    if (num < 0) {\n      throw new Error('Supplied uint is negative');\n    }\n    return num.toArrayLike(Buffer, 'be', 32);\n  } else if (type.startsWith('int')) {\n    size = parseTypeN(type);\n    if (size % 8 || size < 8 || size > 256) {\n      throw new Error(`Invalid int<N> width: ${size}`);\n    }\n    num = parseNumber(arg);\n    if (num.bitLength() > size) {\n      throw new Error(`Supplied int exceeds width: ${size} vs ${num.bitLength()}`);\n    }\n    return num.toTwos(256).toArrayLike(Buffer, 'be', 32);\n  } else if (type.startsWith('ufixed')) {\n    size = parseTypeNxM(type);\n    num = parseNumber(arg);\n    if (num < 0) {\n      throw new Error('Supplied ufixed is negative');\n    }\n    return encodeSingle('uint256', num.mul(new bn_js_1.default(2).pow(new bn_js_1.default(size[1]))));\n  } else if (type.startsWith('fixed')) {\n    size = parseTypeNxM(type);\n    return encodeSingle('int256', parseNumber(arg).mul(new bn_js_1.default(2).pow(new bn_js_1.default(size[1]))));\n  }\n  throw new Error(`Unsupported or invalid type: ${type}`);\n}\n// Is a type dynamic?\n/**\n * @param type\n */\nfunction isDynamic(type) {\n  // FIXME: handle all types? I don't think anything is missing now\n  return type === 'string' || type === 'bytes' || parseTypeArray(type) === 'dynamic';\n}\n// Parse N,M from type<N>x<M>\n/**\n * @param type\n */\nfunction parseTypeNxM(type) {\n  const tmp = /^\\D+(\\d+)x(\\d+)$/u.exec(type);\n  return [parseInt(tmp[1], 10), parseInt(tmp[2], 10)];\n}","map":{"version":3,"names":["util_1","require","ethjs_util_1","bn_js_1","__importDefault","utils_1","solidityPack","types","values","length","Error","ret","i","type","elementaryName","value","push","solidityHexValue","Buffer","concat","exports","isArray","lastIndexOf","parseTypeArray","tmp","match","parseInt","parseTypeN","exec","parseNumber","arg","isHexPrefixed","default","stripHexPrefix","toArray","bitsize","size","num","subType","replace","arraySize","arrayValues","map","v","from","padding","Array","join","bytesize","setLengthLeft","toBuffer","startsWith","normalize","setLengthRight","bitLength","toArrayLike","toTwos","name","slice","rawEncode","output","data","headLength","forEach","cur","encodeSingle","isDynamic","JSON","parse","Object","prototype","hasOwnProperty","call","unshift","zeros","parseTypeNxM","mul","pow"],"sources":["C:\\Users\\User\\OneDrive\\Desktop\\secure-satellite-relay-thesis\\encrypt-sign-app\\node_modules\\@metamask\\eth-sig-util\\src\\ethereumjs-abi-utils.ts"],"sourcesContent":["/* eslint jsdoc/require-description: 0 */\n/* eslint jsdoc/require-returns: 0 */\n/* eslint jsdoc/match-description: 0 */\n/* eslint jsdoc/require-param-description: 0 */\n\nimport {\n  toBuffer,\n  setLengthRight,\n  setLengthLeft,\n  isHexPrefixed,\n  zeros,\n} from '@ethereumjs/util';\nimport { stripHexPrefix } from 'ethjs-util';\nimport BN from 'bn.js';\nimport { normalize } from './utils';\n\n//\n// Methods borrowed and somewhat adapted from ethereumjs-abi@0.6.8:\n// https://npmfs.com/package/ethereumjs-abi/0.6.8/lib/index.js\n//\n\n/**\n * Packs non-standard encoded values packed according to their respective type in types in a buffer.\n *\n * @param types - Array of types of each value to encode.\n * @param values - Array of values to encode.\n * @returns A buffer containing the packed values.\n */\nexport function solidityPack(types: string[], values: any[]) {\n  if (types.length !== values.length) {\n    throw new Error('Number of types are not matching the values');\n  }\n\n  const ret = [];\n\n  for (let i = 0; i < types.length; i++) {\n    const type = elementaryName(types[i]);\n    const value = values[i];\n    ret.push(solidityHexValue(type, value, null));\n  }\n\n  return Buffer.concat(ret);\n}\n\n/**\n * Checks if a value is an array (represented as a string).\n *\n * @param type - The value to check whether it is an array.\n * @returns A boolean indicating whether the passed value is an array.\n */\nfunction isArray(type) {\n  return type.lastIndexOf(']') === type.length - 1;\n}\n\n/**\n * Parse array type for packing solidity values.\n *\n * @param type - A string that may be an array to parse.\n * @returns A parsed value from the array.\n */\nfunction parseTypeArray(type) {\n  const tmp = type.match(/(.*)\\[(.*?)\\]$/u);\n  if (tmp) {\n    return tmp[2] === '' ? 'dynamic' : parseInt(tmp[2], 10);\n  }\n  return null;\n}\n\n/**\n * Parse N from type<N>.\n *\n * @param type - Value to parse.\n * @returns Parsed value.\n */\nfunction parseTypeN(type) {\n  return parseInt(/^\\D+(\\d+)$/u.exec(type)[1], 10);\n}\n\n/**\n * Parse a number for determining a solidity hexvalue.\n *\n * @param arg - Number to parse.\n * @returns Parsed value.\n */\nexport function parseNumber(arg) {\n  const type = typeof arg;\n  if (type === 'string') {\n    if (isHexPrefixed(arg)) {\n      return new BN(stripHexPrefix(arg), 16);\n    }\n    return new BN(arg, 10);\n  } else if (type === 'number') {\n    return new BN(arg);\n  } else if (arg.toArray) {\n    // assume this is a BN for the moment, replace with BN.isBN soon\n    return arg;\n  }\n  throw new Error('Argument is not a number');\n}\n\n/**\n * Get solidity hex value from type, value and bitsize inputs for packing these values in a buffer.\n *\n * @param type - The type of the value to encode.\n * @param value - The value to encode.\n * @param bitsize - The bitsize of the value to encode.\n * @returns The encoded soldity hex value.\n */\nfunction solidityHexValue(type, value, bitsize) {\n  // pass in bitsize = null if use default bitsize\n  let size, num;\n  if (isArray(type)) {\n    const subType = type.replace(/\\[.*?\\]/u, '');\n    if (!isArray(subType)) {\n      const arraySize = parseTypeArray(type);\n      if (\n        arraySize !== 'dynamic' &&\n        arraySize !== 0 &&\n        value.length > arraySize\n      ) {\n        throw new Error(`Elements exceed array size: ${arraySize}`);\n      }\n    }\n    const arrayValues = value.map(function (v) {\n      return solidityHexValue(subType, v, 256);\n    });\n    return Buffer.concat(arrayValues);\n  } else if (type === 'bytes') {\n    return value;\n  } else if (type === 'string') {\n    return Buffer.from(value, 'utf8');\n  } else if (type === 'bool') {\n    bitsize = bitsize || 8;\n    const padding = Array(bitsize / 4).join('0');\n    return Buffer.from(value ? `${padding}1` : `${padding}0`, 'hex');\n  } else if (type === 'address') {\n    let bytesize = 20;\n    if (bitsize) {\n      bytesize = bitsize / 8;\n    }\n    return setLengthLeft(toBuffer(value), bytesize);\n  } else if (type.startsWith('bytes')) {\n    size = parseTypeN(type);\n    if (size < 1 || size > 32) {\n      throw new Error(`Invalid bytes<N> width: ${size}`);\n    }\n\n    if (typeof value === 'number') {\n      value = normalize(value);\n    }\n    return setLengthRight(toBuffer(value), size);\n  } else if (type.startsWith('uint')) {\n    size = parseTypeN(type);\n    if (size % 8 || size < 8 || size > 256) {\n      throw new Error(`Invalid uint<N> width: ${size}`);\n    }\n\n    num = parseNumber(value);\n    if (num.bitLength() > size) {\n      throw new Error(\n        `Supplied uint exceeds width: ${size} vs ${num.bitLength()}`,\n      );\n    }\n\n    bitsize = bitsize || size;\n    return num.toArrayLike(Buffer, 'be', bitsize / 8);\n  } else if (type.startsWith('int')) {\n    size = parseTypeN(type);\n    if (size % 8 || size < 8 || size > 256) {\n      throw new Error(`Invalid int<N> width: ${size}`);\n    }\n\n    num = parseNumber(value);\n    if (num.bitLength() > size) {\n      throw new Error(\n        `Supplied int exceeds width: ${size} vs ${num.bitLength()}`,\n      );\n    }\n\n    bitsize = bitsize || size;\n    return num.toTwos(size).toArrayLike(Buffer, 'be', bitsize / 8);\n  }\n  // FIXME: support all other types\n  throw new Error(`Unsupported or invalid type: ${type}`);\n}\n\n/**\n * Gets the correct solidity type name.\n *\n * @param name - The type name for which we want the corresponding solidity type name.\n * @returns The solidity type name for the input value.\n */\nfunction elementaryName(name) {\n  if (name.startsWith('int[')) {\n    return `int256${name.slice(3)}`;\n  } else if (name === 'int') {\n    return 'int256';\n  } else if (name.startsWith('uint[')) {\n    return `uint256${name.slice(4)}`;\n  } else if (name === 'uint') {\n    return 'uint256';\n  } else if (name.startsWith('fixed[')) {\n    return `fixed128x128${name.slice(5)}`;\n  } else if (name === 'fixed') {\n    return 'fixed128x128';\n  } else if (name.startsWith('ufixed[')) {\n    return `ufixed128x128${name.slice(6)}`;\n  } else if (name === 'ufixed') {\n    return 'ufixed128x128';\n  }\n  return name;\n}\n\n/**\n * @param types\n * @param values\n */\nexport function rawEncode(types, values) {\n  const output = [];\n  const data = [];\n\n  let headLength = 0;\n\n  types.forEach(function (type) {\n    if (isArray(type)) {\n      const size: number | 'dynamic' = parseTypeArray(type);\n      // eslint-disable-next-line no-negated-condition\n      if (size !== 'dynamic') {\n        headLength += 32 * size;\n      } else {\n        headLength += 32;\n      }\n    } else {\n      headLength += 32;\n    }\n  });\n\n  for (let i = 0; i < types.length; i++) {\n    const type = elementaryName(types[i]);\n    const value = values[i];\n    const cur = encodeSingle(type, value);\n\n    // Use the head/tail method for storing dynamic data\n    if (isDynamic(type)) {\n      output.push(encodeSingle('uint256', headLength));\n      data.push(cur);\n      headLength += cur.length;\n    } else {\n      output.push(cur);\n    }\n  }\n\n  return Buffer.concat(output.concat(data));\n}\n\n// Encodes a single item (can be dynamic array)\n// @returns: Buffer\n/**\n * @param type\n * @param arg\n */\nfunction encodeSingle(type, arg) {\n  let size, num, ret, i;\n\n  if (type === 'address') {\n    return encodeSingle('uint160', parseNumber(arg));\n  } else if (type === 'bool') {\n    return encodeSingle('uint8', arg ? 1 : 0);\n  } else if (type === 'string') {\n    return encodeSingle('bytes', Buffer.from(arg, 'utf8'));\n  } else if (isArray(type)) {\n    // this part handles fixed-length ([2]) and variable length ([]) arrays\n    // NOTE: we catch here all calls to arrays, that simplifies the rest\n    if (typeof arg.length === 'undefined') {\n      throw new Error('Not an array?');\n    }\n    size = parseTypeArray(type);\n    if (size !== 'dynamic' && size !== 0 && arg.length > size) {\n      throw new Error(`Elements exceed array size: ${size}`);\n    }\n    ret = [];\n    type = type.slice(0, type.lastIndexOf('['));\n    if (typeof arg === 'string') {\n      arg = JSON.parse(arg);\n    }\n\n    for (i in arg) {\n      if (Object.prototype.hasOwnProperty.call(arg, i)) {\n        ret.push(encodeSingle(type, arg[i]));\n      }\n    }\n\n    if (size === 'dynamic') {\n      const length = encodeSingle('uint256', arg.length);\n      ret.unshift(length);\n    }\n    return Buffer.concat(ret);\n  } else if (type === 'bytes') {\n    arg = Buffer.from(arg);\n\n    ret = Buffer.concat([encodeSingle('uint256', arg.length), arg]);\n\n    if (arg.length % 32 !== 0) {\n      ret = Buffer.concat([ret, zeros(32 - (arg.length % 32))]);\n    }\n\n    return ret;\n  } else if (type.startsWith('bytes')) {\n    size = parseTypeN(type);\n    if (size < 1 || size > 32) {\n      throw new Error(`Invalid bytes<N> width: ${size}`);\n    }\n\n    if (typeof arg === 'number') {\n      arg = normalize(arg);\n    }\n    return setLengthRight(toBuffer(arg), 32);\n  } else if (type.startsWith('uint')) {\n    size = parseTypeN(type);\n    if (size % 8 || size < 8 || size > 256) {\n      throw new Error(`Invalid uint<N> width: ${size}`);\n    }\n\n    num = parseNumber(arg);\n    if (num.bitLength() > size) {\n      throw new Error(\n        `Supplied uint exceeds width: ${size} vs ${num.bitLength()}`,\n      );\n    }\n\n    if (num < 0) {\n      throw new Error('Supplied uint is negative');\n    }\n\n    return num.toArrayLike(Buffer, 'be', 32);\n  } else if (type.startsWith('int')) {\n    size = parseTypeN(type);\n    if (size % 8 || size < 8 || size > 256) {\n      throw new Error(`Invalid int<N> width: ${size}`);\n    }\n\n    num = parseNumber(arg);\n    if (num.bitLength() > size) {\n      throw new Error(\n        `Supplied int exceeds width: ${size} vs ${num.bitLength()}`,\n      );\n    }\n\n    return num.toTwos(256).toArrayLike(Buffer, 'be', 32);\n  } else if (type.startsWith('ufixed')) {\n    size = parseTypeNxM(type);\n\n    num = parseNumber(arg);\n\n    if (num < 0) {\n      throw new Error('Supplied ufixed is negative');\n    }\n\n    return encodeSingle('uint256', num.mul(new BN(2).pow(new BN(size[1]))));\n  } else if (type.startsWith('fixed')) {\n    size = parseTypeNxM(type);\n\n    return encodeSingle(\n      'int256',\n      parseNumber(arg).mul(new BN(2).pow(new BN(size[1]))),\n    );\n  }\n\n  throw new Error(`Unsupported or invalid type: ${type}`);\n}\n\n// Is a type dynamic?\n/**\n * @param type\n */\nfunction isDynamic(type) {\n  // FIXME: handle all types? I don't think anything is missing now\n  return (\n    type === 'string' || type === 'bytes' || parseTypeArray(type) === 'dynamic'\n  );\n}\n\n// Parse N,M from type<N>x<M>\n/**\n * @param type\n */\nfunction parseTypeNxM(type) {\n  const tmp = /^\\D+(\\d+)x(\\d+)$/u.exec(type);\n  return [parseInt(tmp[1], 10), parseInt(tmp[2], 10)];\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}